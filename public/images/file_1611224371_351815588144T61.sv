/*

*** This file is auto generated by IDesignSpec (http://www.agnisys.com) . Please do not edit this file. ***
created by          :
generated by        : crainey
IDesignSpec ver     :  7.4.22.0

**** This code is generated with the following settings ***
Reg Width                  : 32
Address Unit               : 8
C++ Types int              : hwint
Bus Type                   :
BigEndian                  : false
LittleEndian               : true
Dist. Decode and Readback  : false
------------------------------------------------------------ */

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_0_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_0_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_ETS_0_ENTRY
class EXTP_ROT_EXT_IPC_ETS_0_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_0_ENTRY)

    rand uvm_reg_field DATA;/*...*/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_0_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RW", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG
`define CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG
class EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG)

    rand uvm_reg_field DEPTH;/**/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DEPTH = uvm_reg_field::type_id::create("DEPTH");
        this.DEPTH.configure(this, 8, 0, "RO", 0, 8'd64, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS
`define CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS
class EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS)

    rand uvm_reg_field AVAIL_BYTES;/**/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.AVAIL_BYTES = uvm_reg_field::type_id::create("AVAIL_BYTES");
        this.AVAIL_BYTES.configure(this, 8, 0, "RO", 0, 8'd64, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_0_PRODUCER
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER
`define CLASS_EXTP_ROT_EXT_IPC_ETS_0_PRODUCER
class EXTP_ROT_EXT_IPC_ETS_0_PRODUCER extends uvm_reg_file;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_0_PRODUCER)

    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG CONFIG;
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS STATUS;

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_0_PRODUCER");
        super.new(name);
    endfunction

    // Function : build
    virtual function void build();
        //CONFIG
        CONFIG = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_CONFIG::type_id::create("CONFIG");
        CONFIG.configure(get_block(), this, "CONFIG");
        CONFIG.build();
        //STATUS
        STATUS = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER_STATUS::type_id::create("STATUS");
        STATUS.configure(get_block(), this, "STATUS");
        STATUS.build();
    endfunction
    virtual function void map(uvm_reg_map mp, uvm_reg_addr_t offset);
        //add reg and regfiles
        mp.add_reg(CONFIG, offset + 'h0, "RW");

        mp.add_reg(STATUS, offset + 'h4, "RW");

    endfunction
    virtual function void set_offset(uvm_reg_map mp, uvm_reg_addr_t offset);
        CONFIG.set_offset(mp, offset + 'h0 );
        STATUS.set_offset(mp, offset + 'h4 );
    endfunction
endclass : EXTP_ROT_EXT_IPC_ETS_0_PRODUCER
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_STE_0_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_STE_0_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_STE_0_ENTRY
class EXTP_ROT_EXT_IPC_STE_0_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_STE_0_ENTRY)

    rand uvm_reg_field DATA;/**/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_STE_0_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RO", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_1_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_1_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_ETS_1_ENTRY
class EXTP_ROT_EXT_IPC_ETS_1_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_1_ENTRY)

    rand uvm_reg_field DATA;/*...*/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_1_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RW", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_STE_1_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_STE_1_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_STE_1_ENTRY
class EXTP_ROT_EXT_IPC_STE_1_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_STE_1_ENTRY)

    rand uvm_reg_field DATA;/**/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_STE_1_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RO", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_ETS_2_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_ETS_2_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_ETS_2_ENTRY
class EXTP_ROT_EXT_IPC_ETS_2_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_ETS_2_ENTRY)

    rand uvm_reg_field DATA;/*...*/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_ETS_2_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RW", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT_IPC_STE_2_ENTRY
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT_IPC_STE_2_ENTRY
`define CLASS_EXTP_ROT_EXT_IPC_STE_2_ENTRY
class EXTP_ROT_EXT_IPC_STE_2_ENTRY extends uvm_reg;
    `uvm_object_utils(EXTP_ROT_EXT_IPC_STE_2_ENTRY)

    rand uvm_reg_field DATA;/**/

    // Function : new
    function new(string name = "EXTP_ROT_EXT_IPC_STE_2_ENTRY");
        super.new(name, 32, build_coverage(UVM_NO_COVERAGE));
        add_coverage(build_coverage(UVM_NO_COVERAGE));
    endfunction

    // Function : build
    virtual function void build();
        this.DATA = uvm_reg_field::type_id::create("DATA");
        this.DATA.configure(this, 32, 0, "RO", 0, 32'd0, 1, 1, 0);
    endfunction
endclass
`endif

/*----------------------------------------------------------------------
Class       : EXTP_ROT_EXT
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_ROT_EXT
`define CLASS_EXTP_ROT_EXT
class EXTP_ROT_EXT extends uvm_reg_file;
    `uvm_object_utils(EXTP_ROT_EXT)

    rand EXTP_ROT_EXT_IPC_ETS_0_ENTRY IPC_ETS_0_ENTRY[16];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_ETS_0_PRODUCER;
    rand EXTP_ROT_EXT_IPC_STE_0_ENTRY IPC_STE_0_ENTRY[8];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_STE_0_CONSUMER;
    rand EXTP_ROT_EXT_IPC_ETS_1_ENTRY IPC_ETS_1_ENTRY[8];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_ETS_1_PRODUCER;
    rand EXTP_ROT_EXT_IPC_STE_1_ENTRY IPC_STE_1_ENTRY[8];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_STE_1_CONSUMER;
    rand EXTP_ROT_EXT_IPC_ETS_2_ENTRY IPC_ETS_2_ENTRY[8];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_ETS_2_PRODUCER;
    rand EXTP_ROT_EXT_IPC_STE_2_ENTRY IPC_STE_2_ENTRY[8];
    rand EXTP_ROT_EXT_IPC_ETS_0_PRODUCER IPC_STE_2_CONSUMER;

    // Function : new
    function new(string name = "EXTP_ROT_EXT");
        super.new(name);
    endfunction

    // Function : build
    virtual function void build();
        //IPC_ETS_0_ENTRY
        foreach (IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i])
        begin
            IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i] = EXTP_ROT_EXT_IPC_ETS_0_ENTRY::type_id::create($sformatf("IPC_ETS_0_ENTRY['h%0x]", ROT_EXT_IPC_ETS_0_ENTRY_i));
            IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i].configure(get_block(),this, $sformatf("IPC_ETS_0_ENTRY['h%0x]", ROT_EXT_IPC_ETS_0_ENTRY_i));
            IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i].build();
        end
        //IPC_ETS_0_PRODUCER
        IPC_ETS_0_PRODUCER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_ETS_0_PRODUCER");
        IPC_ETS_0_PRODUCER.configure(get_block(), this, "IPC_ETS_0_PRODUCER");
        IPC_ETS_0_PRODUCER.build();
        //IPC_STE_0_ENTRY
        foreach (IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i])
        begin
            IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i] = EXTP_ROT_EXT_IPC_STE_0_ENTRY::type_id::create($sformatf("IPC_STE_0_ENTRY['h%0x]", ROT_EXT_IPC_STE_0_ENTRY_i));
            IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i].configure(get_block(),this, $sformatf("IPC_STE_0_ENTRY['h%0x]", ROT_EXT_IPC_STE_0_ENTRY_i));
            IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i].build();
        end
        //IPC_STE_0_CONSUMER
        IPC_STE_0_CONSUMER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_STE_0_CONSUMER");
        IPC_STE_0_CONSUMER.configure(get_block(), this, "IPC_STE_0_CONSUMER");
        IPC_STE_0_CONSUMER.build();
        //IPC_ETS_1_ENTRY
        foreach (IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i])
        begin
            IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i] = EXTP_ROT_EXT_IPC_ETS_1_ENTRY::type_id::create($sformatf("IPC_ETS_1_ENTRY['h%0x]", ROT_EXT_IPC_ETS_1_ENTRY_i));
            IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i].configure(get_block(),this, $sformatf("IPC_ETS_1_ENTRY['h%0x]", ROT_EXT_IPC_ETS_1_ENTRY_i));
            IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i].build();
        end
        //IPC_ETS_1_PRODUCER
        IPC_ETS_1_PRODUCER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_ETS_1_PRODUCER");
        IPC_ETS_1_PRODUCER.configure(get_block(), this, "IPC_ETS_1_PRODUCER");
        IPC_ETS_1_PRODUCER.build();
        //IPC_STE_1_ENTRY
        foreach (IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i])
        begin
            IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i] = EXTP_ROT_EXT_IPC_STE_1_ENTRY::type_id::create($sformatf("IPC_STE_1_ENTRY['h%0x]", ROT_EXT_IPC_STE_1_ENTRY_i));
            IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i].configure(get_block(),this, $sformatf("IPC_STE_1_ENTRY['h%0x]", ROT_EXT_IPC_STE_1_ENTRY_i));
            IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i].build();
        end
        //IPC_STE_1_CONSUMER
        IPC_STE_1_CONSUMER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_STE_1_CONSUMER");
        IPC_STE_1_CONSUMER.configure(get_block(), this, "IPC_STE_1_CONSUMER");
        IPC_STE_1_CONSUMER.build();
        //IPC_ETS_2_ENTRY
        foreach (IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i])
        begin
            IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i] = EXTP_ROT_EXT_IPC_ETS_2_ENTRY::type_id::create($sformatf("IPC_ETS_2_ENTRY['h%0x]", ROT_EXT_IPC_ETS_2_ENTRY_i));
            IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i].configure(get_block(),this, $sformatf("IPC_ETS_2_ENTRY['h%0x]", ROT_EXT_IPC_ETS_2_ENTRY_i));
            IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i].build();
        end
        //IPC_ETS_2_PRODUCER
        IPC_ETS_2_PRODUCER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_ETS_2_PRODUCER");
        IPC_ETS_2_PRODUCER.configure(get_block(), this, "IPC_ETS_2_PRODUCER");
        IPC_ETS_2_PRODUCER.build();
        //IPC_STE_2_ENTRY
        foreach (IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i])
        begin
            IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i] = EXTP_ROT_EXT_IPC_STE_2_ENTRY::type_id::create($sformatf("IPC_STE_2_ENTRY['h%0x]", ROT_EXT_IPC_STE_2_ENTRY_i));
            IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i].configure(get_block(),this, $sformatf("IPC_STE_2_ENTRY['h%0x]", ROT_EXT_IPC_STE_2_ENTRY_i));
            IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i].build();
        end
        //IPC_STE_2_CONSUMER
        IPC_STE_2_CONSUMER = EXTP_ROT_EXT_IPC_ETS_0_PRODUCER::type_id::create("IPC_STE_2_CONSUMER");
        IPC_STE_2_CONSUMER.configure(get_block(), this, "IPC_STE_2_CONSUMER");
        IPC_STE_2_CONSUMER.build();
    endfunction
    virtual function void map(uvm_reg_map mp, uvm_reg_addr_t offset);
        //add reg and regfiles
        foreach (IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i])
        begin
            mp.add_reg(IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i], offset + 'h0 + ROT_EXT_IPC_ETS_0_ENTRY_i * 'h4, "RW");

        end
        IPC_ETS_0_PRODUCER.map( mp, offset + 'h40);
        foreach (IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i])
        begin
            mp.add_reg(IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i], offset + 'h80 + ROT_EXT_IPC_STE_0_ENTRY_i * 'h4, "RW");

        end
        IPC_STE_0_CONSUMER.map( mp, offset + 'hA0);
        foreach (IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i])
        begin
            mp.add_reg(IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i], offset + 'hC0 + ROT_EXT_IPC_ETS_1_ENTRY_i * 'h4, "RW");

        end
        IPC_ETS_1_PRODUCER.map( mp, offset + 'hE0);
        foreach (IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i])
        begin
            mp.add_reg(IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i], offset + 'h100 + ROT_EXT_IPC_STE_1_ENTRY_i * 'h4, "RW");

        end
        IPC_STE_1_CONSUMER.map( mp, offset + 'h120);
        foreach (IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i])
        begin
            mp.add_reg(IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i], offset + 'h140 + ROT_EXT_IPC_ETS_2_ENTRY_i * 'h4, "RW");

        end
        IPC_ETS_2_PRODUCER.map( mp, offset + 'h160);
        foreach (IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i])
        begin
            mp.add_reg(IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i], offset + 'h180 + ROT_EXT_IPC_STE_2_ENTRY_i * 'h4, "RW");

        end
        IPC_STE_2_CONSUMER.map( mp, offset + 'h1A0);
    endfunction
    virtual function void set_offset(uvm_reg_map mp, uvm_reg_addr_t offset);
        foreach (IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i])
        begin
            IPC_ETS_0_ENTRY[ROT_EXT_IPC_ETS_0_ENTRY_i].set_offset(mp, offset + 'h0 + ROT_EXT_IPC_ETS_0_ENTRY_i * 'h4 );
        end
        IPC_ETS_0_PRODUCER.set_offset(mp, offset + 'h40 );
        foreach (IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i])
        begin
            IPC_STE_0_ENTRY[ROT_EXT_IPC_STE_0_ENTRY_i].set_offset(mp, offset + 'h80 + ROT_EXT_IPC_STE_0_ENTRY_i * 'h4 );
        end
        IPC_STE_0_CONSUMER.set_offset(mp, offset + 'hA0 );
        foreach (IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i])
        begin
            IPC_ETS_1_ENTRY[ROT_EXT_IPC_ETS_1_ENTRY_i].set_offset(mp, offset + 'hC0 + ROT_EXT_IPC_ETS_1_ENTRY_i * 'h4 );
        end
        IPC_ETS_1_PRODUCER.set_offset(mp, offset + 'hE0 );
        foreach (IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i])
        begin
            IPC_STE_1_ENTRY[ROT_EXT_IPC_STE_1_ENTRY_i].set_offset(mp, offset + 'h100 + ROT_EXT_IPC_STE_1_ENTRY_i * 'h4 );
        end
        IPC_STE_1_CONSUMER.set_offset(mp, offset + 'h120 );
        foreach (IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i])
        begin
            IPC_ETS_2_ENTRY[ROT_EXT_IPC_ETS_2_ENTRY_i].set_offset(mp, offset + 'h140 + ROT_EXT_IPC_ETS_2_ENTRY_i * 'h4 );
        end
        IPC_ETS_2_PRODUCER.set_offset(mp, offset + 'h160 );
        foreach (IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i])
        begin
            IPC_STE_2_ENTRY[ROT_EXT_IPC_STE_2_ENTRY_i].set_offset(mp, offset + 'h180 + ROT_EXT_IPC_STE_2_ENTRY_i * 'h4 );
        end
        IPC_STE_2_CONSUMER.set_offset(mp, offset + 'h1A0 );
    endfunction
endclass : EXTP_ROT_EXT
`endif

/*----------------------------------------------------------------------
Class       : EXTP_block
DESCRIPTION:-
-----------------------------------------------------------------------*/
`ifndef CLASS_EXTP_block
`define CLASS_EXTP_block
class EXTP_block extends uvm_reg_block;
    `uvm_object_utils(EXTP_block)

    rand EXTP_ROT_EXT ROT_EXT;

    // Function : new
    function new(string name = "EXTP_block");
        super.new(name, UVM_NO_COVERAGE);
    endfunction

    // Function : build
    virtual function void build();
        //define default map and add reg/regfiles
        default_map= create_map("default_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);

        //ROT_EXT
        ROT_EXT = EXTP_ROT_EXT::type_id::create("ROT_EXT");
        ROT_EXT.configure(this, null, "ROT_EXT");
        ROT_EXT.build();
        ROT_EXT.map(default_map, 'h84000);

        lock_model();
    endfunction

endclass
`endif
