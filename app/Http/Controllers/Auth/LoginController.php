<?php

namespace App\Http\Controllers\Auth;


use App\User;
use App\fogbugzapis;
use App\employees;
use App\managers;
use App\company;
use App\usertracks;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\AuthenticatesUsers;
use Cookie;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;

use Tracker;
use Session;

class LoginController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles authenticating users for the application and
    | redirecting them to your home screen. The controller uses a trait
    | to conveniently provide its functionality to your applications.
    |
    */

    use AuthenticatesUsers;

    /**
     * Where to redirect users after login.
     *
     * @var string
     */
    //  public function 
     
     
    protected $redirectTo = '/dashboard';



    protected $user_pass;

    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        //$this->middleware('guest')->except('logout');
        
    }
    // override the method
    //
    
    public function showLoginForm()
    {
        //dd('lkjhgf');
        Session::put('somekey', 'sidd');
        
        return view ('auth.login');
        
    }
    public function fogBugz($request,$data){
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $request);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Content-Type: application/json; charset=utf-8";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

        return $result;
    }
    public function login(Request $request){ 

            
            $redirectUrl = $request->redirect_url;
            
            
            
            $credentials = $request->only('email', 'password');
            
                // FOgbugz login
                //   Session(['fogbugz' => '']);
                    $result = $this->fogBugz("https://agnisys.fogbugz.com/api/logon",'{
                        "email": "Marcom@agnisys.com",
                        "password": "1_agnisys##"
                      }');
                    // dd($result);
                    if(!$result){
                        // return dd("Fogbuz Slow internet error (please refresh) !!");
                        Session(['fogbugzservererror' => "Fogbuz Slow internet error (please refresh) !!"]);
                        
                    }
                    $fb_login = json_decode($result);
                    
                    $token = NULL;
                    
                    try{
                        $token = $fb_login->data->token;
                        Session(['fogbugz' => $token]);
                        $fogbugzapis = new fogbugzapis;
                        $fogbugzapis->token = $token;
                        $fogbugzapis->login_time = now();
                        $fogbugzapis->save(); 
                    }
                    catch(Exception $e){
                        dd('Fogbugz login error');
                    }  
                    


                    if (Auth::attempt($credentials)){
                        // usertrack login
                            $logintime = date("Y-m-d h:i:s");
                            // $trackurl = url()->full();
                            $trackemail = $credentials['email'];
                            if($trackemail != 'uttam@agnisys.com'){
                                usertracks::create([
                                        'email' => $trackemail,
                                        'login_time' => $logintime,
                                        'url' => '',
                                    ]);
                                $userlog = usertracks::select('*')->orderBy('id', 'desc')->limit(1)->get();
                                $userlogid =  $userlog[0]->id;        
                                Session(['userlogid' => $userlogid]);
                                $cookie_userlog_name = 'userlogid';
                                $cookie_userlog_value = $userlogid;
                                setcookie($cookie_userlog_name, $cookie_userlog_value, time() + (14400),'/'); // 60*60*4 = 4hours
                            }
                        // usertrack login
                        if((is_null($redirectUrl)) OR ($redirectUrl=='')){
                            
                            return redirect($this->redirectTo);
                            
                        } 
                        else
                        {
                            
                            $cookie_name = "openurl";
                            $cookie_value = $redirectUrl;
                            
                            setcookie($cookie_name, $cookie_value, time() + (60 * 0.4)); // 86400 = 1 day
                            return redirect($this->redirectTo);
                            // return redirect($redirectUrl);
                        }
                         
                        
                    } else {
                        return back()->withInput()->withErrors(['Username' => 'Username or pasword is invalid.']);
                    }

            
            // if($credentials['email']
            $user = array();
            
            $user = User::select('*')->where('email',$credentials['email'])->get();
            if ($user->isEmpty()){
                $msg = "<strong>ERROR</strong>: The user with <strong>".$credentials['email']."</strong> email does not exist. ";
                return back()->withInput()->withErrors(['Username' => $msg]);
            }else{
                
                
                // create user in wordpres if not exit
                $name = $user[0]->name;
                $name = explode(" ", $name);
                $fname=$name[0];
                $lname = $name[1];
                $email=$credentials['email'];
                $password=$credentials['password'];
                
                /*
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://lms.agnisys.com/wp-json/v1/UserRegister",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 30,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_POSTFIELDS => array('first_name'=> $fname,'password' => $password,'last_name' =>$lname,'email'=> $email ),
                ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
                */
                
                
                // login wordpress
                // $curl = curl_init();
                // curl_setopt_array($curl, array(
                //     CURLOPT_URL => "https://lms.agnisys.com/wp-json/v1/checkauth/",
                //     CURLOPT_RETURNTRANSFER => true,
                //     CURLOPT_ENCODING => "",
                //     CURLOPT_MAXREDIRS => 10,
                //     CURLOPT_TIMEOUT => 30,
                //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                //     CURLOPT_CUSTOMREQUEST => "POST",
                //     CURLOPT_POSTFIELDS => array('email'=> $credentials['email'],'password' => $credentials['password'],'_token' => time()),
                // ));
                
                // /*@mail("jaydipsavaliya92@gmail.com","new email", print_r($credentials,true));*/
    
                // $response = curl_exec($curl);
                // $err = curl_error($curl);
    
                // curl_close($curl);
                
                
                
                // $is_wp_user_authenticate = false;
                // $wp_user_auth_error = "";
                
                //     if ($err) {
                //       $is_wp_user_error = "cURL Error #:" . $err;
                //     } else {
                //         $as_wp_data =  json_decode($response); 
        
                //         if($as_wp_data->status && $as_wp_data->data->ID){
                            
                //             $user = User::where('email', '=', $as_wp_data->data->user_email)->first();
                //             $user->password = Hash::make($as_wp_data->pw);
                //             $user->save(); 
                //             // Cookie::queue('wordpress_logged_in', 'true', 20); 
                //             // echo "<pre>"; var_dump($_COOKIE); exit();
                //             //$credentials['password'] = $as_wp_data->pw;
                //             $is_wp_user_authenticate = true;
                //         }else{
                //             $is_wp_user_error = $as_wp_data->msg;
                //         }
                //     }  

                
                // FOgbugz login
                //   Session(['fogbugz' => '']);
                    $result = $this->fogBugz("https://agnisys.fogbugz.com/api/logon",'{
                        "email": "Marcom@agnisys.com",
                        "password": "1_agnisys##"
                      }');
                    // dd($result);
                    if(!$result){
                        // return dd("Fogbuz Slow internet error (please refresh) !!");
                        Session(['fogbugzservererror' => "Fogbuz Slow internet error (please refresh) !!"]);
                        
                    }
                    $fb_login = json_decode($result);
                    
                    $token = NULL;
                    
                    try{
                        $token = $fb_login->data->token;
                        Session(['fogbugz' => $token]);
                        $fogbugzapis = new fogbugzapis;
                        $fogbugzapis->token = $token;
                        $fogbugzapis->login_time = now();
                        $fogbugzapis->save(); 
                    }
                    catch(Exception $e){
                        dd('Fogbugz login error');
                    }  
                    
                // end fogbugz login
                
                // fogbugz api get token 
                
                // end fogbugz api get token
                 
                    
                if($is_wp_user_authenticate){
                    if (Auth::attempt($credentials)) { 
                        if((is_null($redirectUrl)) OR ($redirectUrl=='')){
                            return redirect($this->redirectTo);
                            
                        } 
                        else
                        {
                            $cookie_name = "openurl";
                            $cookie_value = $redirectUrl;
                            setcookie($cookie_name, $cookie_value, time() + (60 * 0.4)); // 86400 = 1 day
                            return redirect($this->redirectTo);
                            // return redirect($redirectUrl);
                        }
                        
                    } else {
                        return back()->withInput()->withErrors(['Username' => 'Username or pasword is invalid.']);
                    }
                }else{
                    return back()->withInput()->withErrors(['Username' => $is_wp_user_error]);
                }
            }
        }








    protected function authenticated(Request $request, $user){


    

        
    }
    
    
    public function Fogbugzlogoff($request){
        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, $request);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Content-Type: application/json; charset=utf-8";
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close ($ch);

        return $result;
    }
    

    public function logout(Request $request)
    {
        $data = Session::all();         
        
        $token = $data['fogbugz'];
        $url = "https://agnisys.fogbugz.com/api.asp?cmd=logoff&token=".$token;
        $result = $this->Fogbugzlogoff($url);
        setcookie('uid', 0, time() + (-1), "/");
        setcookie('userAuth', 0, time() + (-1), "/");
        setcookie('userlogid', 0, time() + (-1), "/");
        $this->guard()->logout();
        $userlogid = Session::get('userlogid');
        $logoutTime = date('Y-m-d h:i:s');
        usertracks::where('id',$userlogid)
                    ->update(['logout_time' => $logoutTime]);
        $request->session()->flush();
        

        $request->session()->regenerate();

        return redirect('/');
    }
}
